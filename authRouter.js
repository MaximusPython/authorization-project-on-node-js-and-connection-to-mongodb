// #1 в этом файле мы определяем маршруты по которым эти запросы будут отправляться

const Router = require('express')
// импортируем роутер из библиоткеи express

const router = new Router()
// создаем обьект этого роутера, который будет прослушивать разные http:запросы: get, put и другие

const controller = require('./authController')
// импортируем созданный контроллер

const { check } = require('express-validator')
// эксопртируем функцию check из пакета express-validator. эта функция является middleware (имеет свой синтаксис)

const authMiddleware = require('./middleware/authMiddleware')
// импортируем сюда созданный middleware 1

const roleMiddleware = require('./middleware/roleMiddleware')
// импортируем сюда созданный middleware 2 ролей

router.post(
  '/registration',
  [
    check('username', 'Имя пользователя не может быть пустым').notEmpty(), // middleware передаются вторым параметром в []
    check(
      // в функции check первым параметром мы указываем поле которое будем валидировать, вторым параметром сообщение которое выведется
      'password', // если это валидация была не успешной. notEmpty - означает что поле не может быть пустым
      'Пароль должен быть больше 4 и меньше 10 символов'
    ).isLength({ min: 4, max: 10 }), // isLength означает что поле password не может длинее 10 и короче 4
  ],
  controller.registration
)
// post запрос на регистрацию, вторым параметром [middleware] указываем валидацию полей username и password
// и указываем какая из функций (из контроллера) должна отрабатывать на тот или иной запрос

router.post('/login', controller.login)
// post запрос на авторизацию, и указываем какая из функций (из контроллера) должна отрабатывать на тот или иной запрос
// у нашего приложения будет два post запроса

router.get('/users', authMiddleware, controller.getUsers) // после указаний функций, наш роутер знает какие функции вызывать на тот или иной запрос.
// третий эсперементальный get запрос, на котором мы будем устанавливать различные доступы, как для пользователя, как для админа,
// как и запрещать использовать этот метод не авторизованным пользователям. Вторым параметром мы передали созданный middleware (что
// получать пользователей могут только авторизованные пользователи)

router.get('/users', roleMiddleware(['USER', 'ADMIN']), controller.getUsers)
// создали еще такую же функцию чтобы ей также дополнительно наглядно передать еще второй middleware с ролями
// второй middleware принимает параметром массив разрешенных ролей. Функция get users доступна тут только для 'USER' (авториз польз) и 'ADMIN'

module.exports = router
// экспортируем обьект этого роутера
