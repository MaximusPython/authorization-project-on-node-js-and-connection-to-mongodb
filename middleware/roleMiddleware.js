// продолжение #4. А тут создаем тоже функцию middleware для того чтобы доступ к методу (для функции get users) был только у администраторов (role)
// после ее создания мы импортируем ее также в файл authRouter, для функции get users

const jwt = require('jsonwebtoken')
// импортируем сюда сам модуль токена

const { secret } = require('../config')
// этот секретный ключ (не весь файл) тоже импортируем сюда через деструктиризацию

module.exports = function (roles) {
  // а в эту функцию передаем массив ролей
  // используем замыкание из функции возращаем еще функцию которая уже является middleware, это нужно для того
  // чтобы наш middleware узнавал какие роли разрешены а какие нет

  return function (res, req, next) {
    if (req.method === 'OPTIONS') {
      // скопировали этот код из ранее созданного authMiddleware.js
      next()
      // если метод равен 'OPTIONS' то мы вызываем след по цепочки middleware. нам нужны методы get, post

      try {
        const token = req.headers.authorization.split(' ')[1]
        // вытаскиваем токен из заголовка headers, нас интересует сам токен а не его тип поэтому берем только его вторую часть [1]

        if (!token) {
          // если токена нет то пишем ошибку

          return res
            .status(403)
            .json({ message: 'Пользователь не авторизован' })
        }
        const { roles: userRoles } = jwt.verify(token, secret)
        // Начнем с этой строки. тут из токена мы получаем массив ролей и определяем их как userRoles, и также расшифровываем токен передавая его, и секрет ключ

        let hashRole = false
        // теперь необходимо проверить есть ли в списке ролей те роли которые разрешены для нашей функции, создали переменную она будет либо true || false

        userRoles.forEach((role) => {
          // пробегаемся по всем ролям пользователя

          if (roles.includes(role)) {
            // проверяем если массив ролей пользователя содержит в себе хотябы одну роль которая разрешена для функции get users
            // эти разрешенные роли мы будем передавать параметром в middleware

            hashRole = true // то тогда функция get users будет разрешена
          }
        })
        if (!hashRole) {
          return res.status(403).json({ message: 'У вас нет доступа' })
        } // если роль не разрешена возращаем ошибку и текст на клиент

        next()
        // далее вызывем функцию next для вызова следующего по цепочки middleware
      } catch (e) {
        console.log(e)
        return res.status(403).json({ message: 'Пользователь не авторизован' })
      }
    }
  }
}
